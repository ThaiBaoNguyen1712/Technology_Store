@model Tech_Store.Models.Product
@{
    ViewData["Title"] = "Chỉnh sửa sản phẩm";
    Layout = "~/Areas/Admin/Views/Shared/Layout.cshtml";
}
<style>

</style>

<form asp-action="EditProduct" asp-controller="Product" method="post" enctype="multipart/form-data" id="ProductForm">

    <div class="container-fluid">
        <h3 class="py-3 ms-3">
            <i class="fas fa-box text-info pe-2"></i> Chỉnh Sửa Sản Phẩm
        </h3>
        @Html.AntiForgeryToken()
        <div class="card mb-4">
            <div class="card-header">
                <h5>
                    <i class="fas fa-sticky-note text-info pe-2"></i> Thông tin sản phẩm
                </h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label name="Name" class="form-label">Tên Sản Phẩm (VN)</label>
                    <input value="@Model.Name" name="Name" class="form-control" required />
                </div>
                <div class="mb-3">
                    <label name="Description" class="form-label">Mô tả</label>
                    <textarea name="Description" class="form-control" id="description">@Html.Raw(Model.Description)</textarea>
                </div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <h5><i class="fas fa-cogs text-info pe-2"></i> Thiết lập chung</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <input type="hidden" name="ProductId" value="@Model.ProductId"/>
                        <label name="Category" class="form-label">Danh Mục</label>
                        <select name="CategoryId" class="form-control border selectpicker" data-live-search="true" required>
                            @foreach (var item in ViewBag.Categories)
                            {
                                <option value="@item.CategoryId" @(item.CategoryId == Model.CategoryId ? "Selected" : "")> @item.Name</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label name="Brand" class="form-label">Thương Hiệu</label>
                        <select name="BrandId" class="form-control border selectpicker" data-live-search="true" required>
                            @foreach (var item in ViewBag.Brands)
                            {
                                <option value="@item.BrandId" @(item.BrandId == Model.BrandId ? "selected" : "")> @item.Name</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label class="form-label">SKU Sản Phẩm</label>
                        <span class="input-label-secondary cursor-pointer" data-bs-toggle="tooltip" title='Bạn không thể thay đổi SKU'>
                            <i class="fas fa-info-circle text-info"></i>
                        </span>
                        <input value="@Model.Sku" name="Sku" type="text" class="form-control" id="SkuCode" readonly/>
                    </div>

                    <div class="col-md-6 mb-3">
                        <label name="Brand" class="form-label">Tình trạng</label>
                        <span class="input-label-secondary cursor-pointer" data-bs-toggle="tooltip" title="Nhập tình trạng để xử lý khi bán hàng">
                            <i class="fas fa-info-circle text-info"></i>
                        </span>
                        <select name="Status" class="form-control border selectpicker" data-live-search="true" required>
                            <option value="preorder" @(Model.Status == "preorder" ? "selected" : "")> Đặt trước </option>
                            <option value="available" @(Model.Status == "available" ? "selected" : "")> Có sẵn </option>
                            <option value="outstock" @(Model.Status == "outstock" ? "selected" : "")> Hết hàng </option>
                            <option value="StopSell" @(Model.Status == "discontinued" ? "selected" : "")> Ngưng bán </option>
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <h5> <i class="fas fa-tags text-info pe-2"></i> Giá và các yếu tố khác  </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3 mb-3">
                        <label name="ImportPrice" class="form-label">Giá Nhập (đ)</label>
                        <span class="input-label-secondary cursor-pointer" data-bs-toggle="tooltip" title="Thêm giá nhập cho sản phẩm này">
                            <i class="fas fa-info-circle text-info"></i>
                        </span>
                        <input value="@Model.CostPrice" name="CostPrice" type="number" class="form-control" />
                    </div>
                    <div class="col-md-3 mb-3">
                        <label name="Price" class="form-label">Đơn Giá Gốc (đ)</label>
                        <span class="input-label-secondary cursor-pointer" data-bs-toggle="tooltip" title="Đặt giá bán cho mỗi đơn vị của sản phẩm này. Phần đơn giá này sẽ không áp dụng nếu bạn đặt biến giá thay đổi">
                            <i class="fas fa-info-circle text-info"></i>
                        </span>
                        <input value="@Model.OriginalPrice" name="OriginalPrice" type="number" class="form-control" id="OriginalPrice" />
                    </div>
                    <div class="col-md-3 mb-3">
                        <label name="Stock" class="form-label">Số Lượng</label>
                        <span class="input-label-secondary cursor-pointer" data-bs-toggle="tooltip" title="Thêm số lượng tồn kho hiện tại cho sản phẩm này">
                            <i class="fas fa-info-circle text-info"></i>
                        </span>
                        <input value="@Model.Stock" name="Stock" type="number" class="form-control" />
                    </div>
                    <div class="col-md-3 mb-3">
                        <label name="Stock" class="form-label">Khối Lượng (KG)</label>
                        <span class="input-label-secondary cursor-pointer" data-bs-toggle="tooltip" title="Thêm khối lượng cho sản phẩm này, Đơn vị là kilogram">
                            <i class="fas fa-info-circle text-info"></i>
                        </span>
                        <input value="@Model.Weight" name="Weight" step="0.01" min="0" type="number" class="form-control" />
                    </div>

                </div>
                <div class="row">
                    <div class="col-md-3 mb-3">
                        <label name="Stock" class="form-label">Bảo Hành (Tháng)</label>
                        <span class="input-label-secondary cursor-pointer" data-bs-toggle="tooltip" title="Thêm chế độ bảo hành cho sản phẩm này">
                            <i class="fas fa-info-circle text-info"></i>
                        </span>
                        <input value="@Model.WarrantyPeriod" name="WarrantyPeriod" type="number" class="form-control" />
                    </div>
                    <div class="col-md-3 mb-3">
                        <label name="DiscountPercentage" class="form-label">Loại Giảm Giá</label>
                        <span class="input-label-secondary cursor-pointer" data-bs-toggle="tooltip" title="Chọn giảm giá bằng trừ tiền trực tiếp hoặc theo phần trăm (%). Để trống nếu bạn không muốn áp dụng khuyến mãi">
                            <i class="fas fa-info-circle text-info"></i>
                        </span>
                        <select name="DiscountTypeId" id="DiscountType" class="form-select">
                            <option value="1" @(Model.DiscountAmount.HasValue ? "Selected" : "")>Cố định</option>
                            <option value="2" @(Model.DiscountPercentage.HasValue ? "Selected" : "")>Phần trăm</option>
                        </select>
                    </div>

                    <div class="col-md-3 mb-3">
                        <div id="discount-section">
                            @if (Model.DiscountAmount.HasValue)
                            {
                                <div>
                                    <label for="discountAmount" class="form-label">Số Tiền Giảm Giá (đ)</label>
                                    <input name="discountAmount" value="@(Model.DiscountAmount ?? 0)" type="number" class="form-control" id="discountAmount" />
                                </div>
                            }

                            @if (Model.DiscountPercentage.HasValue)
                            {
                                <div>
                                    <label for="discountPercentage" class="form-label">Số Tiền Giảm Giá (%)</label>
                                    <input name="discountPercentage" value="@(Model.DiscountPercentage ?? 0)" type="number" class="form-control" id="discountPercentage" />
                                </div>
                            }
                        </div>

                    </div>

                    <div class="col-md-3 mb-3">
                        <label name="sellPrice" class="form-label">Giá Bán (đ)</label>
                        <span class="input-label-secondary cursor-pointer" data-bs-toggle="tooltip" title="Giá bán sẽ được tự động tính toán. Chỉ thay đổi nếu có sai số để tránh việc sai số sau này">
                            <i class="fas fa-info-circle text-info"></i>
                        </span>
                        <input value="@Model.SellPrice" name="sellPrice" type="number" class="form-control" id="sellPrice" />
                    </div>
                </div>

            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <h5>
                    <i class="fas fa-layer-group text-info pe-2"></i>
                    Biến thể sản phẩm
                </h5>
                <div class="form-group d-flex align-items-center">
                    @if (Model.VarientProducts.Any(s => !string.IsNullOrEmpty(s.Attributes)))
                    {
                        <input type="hidden" name="IsUseVariant" value="true" />
                        <input class="form-check-input me-2 mb-2" type="checkbox" checked onclick="return false;" />
                    }
                    else
                    {
                        <input class="form-check-input me-2 mb-2" name="IsUseVariant" id="useVariant" type="checkbox" value="true" />
                        <input type="hidden" name="IsUseVariant" value="false" /> <!-- Thêm input ẩn -->
                    }

                    <label class="form-label mb-0" for="useVariant">Sử dụng biến thể cho sản phẩm</label>
                </div>
             
            </div>
            <div class="card-body">
                @{
                    // Dictionary để lưu các thuộc tính và danh sách giá trị của chúng
                    Dictionary<string, List<string>> attributeMap = new Dictionary<string, List<string>>();

                    foreach (var attr in Model.VarientProducts)
                    {
                        if (attr.Attributes != null)
                        {
                            var attributePairs = attr.Attributes.Split(',');

                            foreach (var attributePair in attributePairs)
                            {
                                var attrParts = attributePair.Split(':');
                                if (attrParts.Length != 2) continue; // Nếu không đúng định dạng thì bỏ qua

                                string attrKey = attrParts[0].Trim(); // Tên thuộc tính (e.g., "ROM")
                                string attrValue = attrParts[1].Trim(); // Giá trị thuộc tính (e.g., "64GB")

                                // Nếu key chưa tồn tại, thêm mới
                                if (!attributeMap.ContainsKey(attrKey))
                                {
                                    attributeMap[attrKey] = new List<string>();
                                }
                                // Thêm giá trị vào danh sách của thuộc tính đó
                                attributeMap[attrKey].Add(attrValue);
                            }
                        }
                    }
                }

                <div class="row">
                      <div class="col-md-6 mb-3">
                        <label class="form-label">Chọn thuộc tính</label>
                        <span class="input-label-secondary cursor-pointer" data-bs-toggle="tooltip" title="Sử dụng các biến thể khác để phân biệt sản phẩm">
                            <i class="fas fa-info-circle text-info"></i>
                        </span>
                        <div class="d-flex">
                            <select name="VarientSelect" id="variantSelect" class="form-control border selectpicker" multiple="multiple" data-live-search="true">
                                @foreach (var item in ViewBag.Attributes)
                                {
                                  <option value="@item.Code" @(ViewBag.Attributes_checked?.Contains(item.AttributeId) == true ? "selected" : "")>
                                    @item.Name
                                </option>

                                }
                            </select>
                            <button type="button" class="btn btn-primary ms-2" data-bs-toggle="modal" data-bs-target="#attributeModal">
                                <i class="fa fa-plus-circle"></i>
                            </button>
                        </div>
                    </div>

                    @foreach (var item in ViewBag.Attributes)
                    {
                        <div class="col-md-6 mb-3" id="@item.Code" style="@(attributeMap.ContainsKey(item.Code) ? "" : "display:none")">
                            <label class="form-label">@item.Name</label>
                            <select name="AttributeValueIds" id="@($"{item.Code}Select")" class="form-control border selectpicker" multiple="multiple" data-live-search="true">
                                @foreach (var value in item.AttributeValues)
                                {
                                    // Chỉ tick nếu thuộc tính và giá trị phù hợp
                                    bool isSelected = attributeMap.ContainsKey(item.Code) && attributeMap[item.Code].Contains(value.Value);

                                    <option value="@value.Value" data-id="@value.AttributeValueId" @(isSelected ? "selected" : "")>@value.Value</option>
                                }
                            </select>
                        </div>
                    }

                </div>
                <div class="table-responsive table-Varient mt-4" style="@(Model.VarientProducts.Any(s => !string.IsNullOrEmpty(s.Attributes)) ? "" : "display:none")">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>STT</th>
                                <th>Biến thể thuộc tính</th>
                                <th>Giá theo biến thể (đ)</th>
                                <th>
                                    SKU
                                    <span class="input-label-secondary cursor-pointer" data-bs-toggle="tooltip" title="Nếu chưa có mã SKU đầy đủ hãy copy SKU sản phẩm phía trên để bổ sung">
                                        <i class="fas fa-info-circle text-info"></i>
                                    </span>
                                </th>
                                <th>Hàng tồn kho theo biến thể</th>
                            
                            </tr>
                        </thead>
                        <tbody id="variantTableBody">
                            @{
                                int index = 0;
                            }  

                            @foreach (var varient in Model.VarientProducts)
                            {
                                <tr>
                                    <td>@(index + 1)</td>
                                    <td style="display:none">
                                        <input type="hidden" name="VarientProducts[@index].VarientId" value="@varient.VarientId" />
                                        <input type="hidden" name="VarientProducts[@index].ProductId" value="@varient.ProductId" />
                                        <input type="hidden" name="VarientProducts[@index].Attributes" value="@(varient.Attributes?.ToString() ?? "")" />

                                    </td>
                                    <td>@varient.Attributes</td>
                                    <td>
                                        <input type="number" class="form-control" name="VarientProducts[@index].Price" value="@varient.Price" />
                                    </td>
                                    <td>
                                        <input type="text" class="form-control" name="VarientProducts[@index].Sku" value="@varient.Sku" readonly />
                                    </td>
                                    <td>
                                        <input type="number" class="form-control" name="VarientProducts[@index].Stock" value="@varient.Stock" required />
                                    </td>
                                </tr>
                                index++;  // Tăng giá trị index sau mỗi lần lặp
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="row mb-4">
            <!-- Hình đại diện -->
            <div class="col-md-3">
                <div class="card mb-4">
                    <div class="card-body">
                        <label class="form-label">Hình Ảnh Thu Nhỏ Sản Phẩm</label>
                        <input type="file" name="Image" id="thumbnailInput" class="filepond"
                               accept="image/*" data-files='@Json.Serialize(new List<string> { Model.Image })' />
                        <small class="text-muted text-warning">1 ảnh, kích thước tối đa: 2MB</small>
                    </div>
                </div>
            </div>

            <!-- Hình ảnh bổ sung -->
            <div class="col-md-9">
                <div class="card mb-4">
                    <div class="card-body">
                        <label class="form-label">Tải Lên Hình Ảnh Bổ Sung</label>
                        <input type="file" name="Galleries" id="additionalInput" class="filepond filepond-multiple"
                               multiple accept="image/*" data-files='@Json.Serialize(Model.Galleries.Select(g => g.Path))' />
                        <small class="text-muted text-warning">Tối đa 8 hình ảnh, mỗi hình tối đa 2MB</small>
                    </div>
                </div>
            </div>


        </div>


        <div class="card mb-4">
            <div class="card-header">
                <h5>
                    <i class="fas fa-play text-info pe-2"></i>
                    Video Sản Phẩm
                </h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Video sản phẩm</label>
                    <span class="input-label-secondary cursor-pointer" data-bs-toggle="tooltip" title="Nhập URL Youtube, video sẽ được hiển thị trên trang bán hàng">
                        <i class="fas fa-info-circle text-info"></i>
                    </span>
                    <input value="@Model.UrlYoutube" type="url" class="form-control" id="videoUrl" name="urlYoutube" placeholder="Nhập URL video YouTube" />
                    <div id="videoPreview" class="mt-2"></div>
                </div>
            </div>
        </div>

        <div class="text-end">
            <button type="submit" class="btn btn-primary">Cập nhật sản phẩm</button>
        </div>
    </div>
</form>
<!--Modal Attribute-->
@Html.Partial("AttributeModal")
<script src="~/Admin/assets/js/core/jquery-3.7.1.min.js"></script>
@*
Ckeditor *@
<script src="~/admin/ckeditor/ckeditor.js"></script>
<script>
    $(document).ready(function () {
        FilePond.registerPlugin(
            FilePondPluginImagePreview,
            FilePondPluginFileValidateType,
            FilePondPluginImageExifOrientation
        );

        function createFilePond(inputId, allowMultiple, isGallery) {
            const inputElement = document.getElementById(inputId);
            if (!inputElement) return;

            let filesData = inputElement.getAttribute("data-files");
            let files = [];
            if (filesData) {
                try {
                    let paths = JSON.parse(filesData);
                    files = paths.filter(path => path).map(path => ({
                        source: path,
                        options: { type: "local" }
                    }));
                } catch (error) {
                    console.error("Lỗi khi parse danh sách ảnh:", error);
                }
            }

            const deleteEndpoint = isGallery ?
                '@Url.Action("DeleteFileImageFromGalleries", "Products", new { area = "Admin" })' :
                '@Url.Action("DeleteFileImage", "Products", new { area = "Admin" })';

            return FilePond.create(inputElement, {
                allowMultiple: allowMultiple,
                maxFiles: allowMultiple ? 8 : 1,
                maxFileSize: "2MB",
                acceptedFileTypes: ["image/*"],
                labelIdle: "Kéo thả hoặc nhấn để chọn hình",
                imagePreviewHeight: 150,
                imagePreviewMinHeight: 100,
                files: files,
                storeAsFile: true,
                server: {
                    load: (source, load, error, progress, abort, headers) => {
                        fetch("@Url.Content("~/Upload/Products/")" + source)
                            .then(response => response.blob())
                            .then(blob => load(blob))
                            .catch(error => {
                                console.error("Lỗi tải ảnh:", error);
                                abort();
                            });
                    },
                    remove: (source, load, error) => {
                        // Hiển thị hộp thoại xác nhận trước khi xóa
                        Swal.fire({
                            title: "Bạn có chắc chắn muốn xóa ảnh này?",
                            text: "Ảnh sau khi xóa sẽ không thể khôi phục!",
                            icon: "warning",
                            showCancelButton: true,
                            confirmButtonColor: "#d33",
                            cancelButtonColor: "#3085d6",
                            confirmButtonText: "Xóa",
                            cancelButtonText: "Hủy"
                        }).then((result) => {
                            if (result.isConfirmed) {
                                // Lấy ID sản phẩm từ form hoặc data attribute
                                const productId = document.querySelector('#ProductForm input[name="ProductId"]').value;

                                fetch(deleteEndpoint, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                                    },
                                    body: JSON.stringify({
                                        productId: productId,
                                        filePath: source
                                    })
                                })
                                    .then(response => response.json())
                                    .then(data => {
                                        if (data.success) {
                                            load();
                                            Swal.fire({
                                                icon: 'success',
                                                title: 'Xóa ảnh thành công!',
                                                showConfirmButton: false,
                                                timer: 1500
                                            });
                                        } else {
                                            error('Xóa file thất bại');
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Xóa ảnh thất bại!',
                                                text: data.message || 'Vui lòng thử lại sau',
                                                confirmButtonText: 'OK'
                                            });
                                        }
                                    })
                                    .catch(err => {
                                        console.error('Lỗi khi xóa file:', err);
                                        error('Xóa file thất bại');
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Đã xảy ra lỗi!',
                                            text: 'Không thể xóa ảnh. Vui lòng thử lại sau.',
                                            confirmButtonText: 'OK'
                                        });
                                    });
                            } else {
                                error("Hủy xóa ảnh");
                            }
                        });
                    }
                }
            });
        }

        // Khởi tạo FilePond cho thumbnail (isGallery = false)
        const thumbnailPond = createFilePond("thumbnailInput", false, false);
        // Khởi tạo FilePond cho gallery (isGallery = true)
        const galleryPond = createFilePond("additionalInput", true, true);
    });
</script>


<script>
    function deleteImgFromGalleries(id) {
        console.log(id); // Kiểm tra giá trị id
        if (confirm("Bạn có chắc rằng muốn gỡ ảnh này?")) {
            $.ajax({
                method: "POST",
                url: "/Admin/Products/DeleteImageFromGalleries/" + id, // Đảm bảo đường dẫn này là chính xác
                success: function () {
                    window.location.reload(); // Tải lại trang sau khi thành công
                    alert("Gỡ Thành công")
                },
                error: function (xhr, error) {
                    alert("Đã có lỗi khi gỡ hình ảnh");
                }
            });
        }
    }

    function deleteImg(id) {
        console.log(id); // Kiểm tra giá trị id
        if (confirm("Bạn có chắc rằng muốn gỡ ảnh thumbnail?")) {
            $.ajax({
                method: "POST",
                url: "/Admin/Products/DeleteImage/" + id, 
                success: function () {
                    window.location.reload(); // Tải lại trang sau khi thành công
                    alert("Gỡ Thành công")

                },
                error: function (xhr, error) {
                    alert("Đã có lỗi khi gỡ hình ảnh");
                }
            });
        }
    }


</script>
<script>
    $(document).ready(function () {
        $('.selectpicker').selectpicker();

        function updateVariantTable() {
            // Get all selected attributes and their values
            var selectedAttributes = $('#variantSelect').val() || [];
            var variants = [{}];  // Start with an empty variant

            // For each selected attribute, get its values and create combinations
            selectedAttributes.forEach(function (attributeCode) {
                var selectedValues = $(`#${attributeCode}Select`).val() || [];
                if (selectedValues.length === 0) return;

                // Create new variants array by combining existing variants with new values
                var newVariants = [];
                variants.forEach(function (existingVariant) {
                    selectedValues.forEach(function (value) {
                        var newVariant = { ...existingVariant };
                        newVariant[attributeCode] = value;
                        newVariants.push(newVariant);
                    });
                });
                variants = newVariants;
            });

            // If no valid combinations were created, return
            if (variants.length === 0 || Object.keys(variants[0]).length === 0) return;

            var tableBody = $('#variantTableBody');
            tableBody.empty();

            variants.forEach(function (variant, index) {
                var variantString = Object.entries(variant)
                    .map(([key, value]) => `${key}: ${value}`)
                    .join(', ');

                var skuProduct = $('#SkuCode').val() || '';
                var sku = skuProduct + '-' + Object.values(variant).join('-');
                var price = $('#sellPrice').val();

                var row = $('<tr>');
                row.append($('<td>').text(index + 1));
                row.append($('<td style="display:none">').html(
                    '<input type="hidden" name="VarientProducts[' + index + '].Attributes" value="' + variantString + '"/>'
                ));
                row.append($('<td>').text(variantString));
                row.append($('<td>').html(
                    '<input type="number" class="form-control" name="VarientProducts[' + index + '].Price" value="' + price + '"/>'
                ));
                row.append($('<td>').html(
                    '<input type="text" class="form-control" name="VarientProducts[' + index + '].Sku" value="' + sku + '"/>'
                ));
                row.append($('<td>').html(
                    '<input type="number" class="form-control" name="VarientProducts[' + index + '].Stock" value="1" required/>'
                ));
     
                row.append($('<td style="width:10%">').html(
                    '<i class="fas fa-trash delete-btn text-center text-danger" title="Xóa"></i>'
                ));

                tableBody.append(row);
                console.log(variantString)
            });

            $('.table-Varient').show();
  
            updateRowNumbers();
        }

        // Handle attribute selection changes
        $('#variantSelect').on('changed.bs.select', function () {
            var selectedOptions = $(this).val() || [];

            // Hide all attribute selection divs first
            // Changed selector to only target attribute containers
            $('.col-md-6[id]').not('#variantSelect').hide();

            // Show only the selected ones
            selectedOptions.forEach(function (attributeCode) {
                $(`#${attributeCode}`).show();
            });

            updateVariantTable();
        });

        // Handle attribute value changes
        $(document).on('change', '.selectpicker', function () {
            updateVariantTable();
        });

        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        });
    });

    function updateRowNumbers() {
        $('#variantTableBody tr').each(function (index) {
            // Update visible row number
            $(this).find('td:first').text(index + 1);

            // Update hidden input names and visible input names
            $(this).find('input').each(function () {
                var name = $(this).attr('name');
                if (name) {
                    var newName = name.replace(/\[\d+\]/, '[' + index + ']');
                    $(this).attr('name', newName);
                }
            });
        });
    }

    $(document).on('click', '.delete-btn', function () {
        $(this).closest('tr').remove();
        updateRowNumbers();
    });
</script>
<script>
    $(document).ready(function () {
        // Xử lý URL video YouTube
        $('#videoUrl').change(function () {
            const url = $(this).val();
            const videoId = extractVideoID(url);
            if (videoId) {
                $('#videoPreview').html(`<iframe width="560" height="315" src="https://www.youtube.com/embed/${videoId}" frameborder="0" allowfullscreen></iframe>`);
            } else {
                $('#videoPreview').empty();
            }
        });

        // Hàm trích xuất ID video từ URL YouTube
        function extractVideoID(url) {
            const regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#&?]*).*/;
            const match = url.match(regExp);
            return (match && match[7].length == 11) ? match[7] : false;
        }
    });


</script>

<script type="text/javascript">
    CKEDITOR.replace('description');
</script>
<script type="text/javascript">
    $(document).ready(function () {
        // Ẩn các trường nhập liệu ban đầu
        $('#percent').hide();

        // Kiểm tra giá trị của dropdown khi thay đổi
        $('#DiscountType').on('change', function () {
            var selectedValue = $(this).val(); // Lấy giá trị được chọn

            // Ẩn tất cả các trường nhập liệu
            $('#cash').hide();
            $('#percent').hide();

            // Hiển thị trường nhập liệu tương ứng với loại giảm giá được chọn
            if (selectedValue === "1") { // Loại giảm giá "Cố định"
                $('#cash').show(); // Hiện trường số tiền giảm giá
            } else if (selectedValue === "2") { // Loại giảm giá "Phần trăm"
                $('#percent').show(); // Hiện trường số tiền giảm giá phần trăm
            }
        });

        // Tính toán giá bán khi có thay đổi ở các trường nhập liệu
        $('#OriginalPrice, #discountAmount, #discountPercentage').on('input', function () {
            calculateSellPrice();
        });

        function calculateSellPrice() {
            let originalPrice = parseFloat($('#OriginalPrice').val()) || 0;
            let discountType = $('#DiscountType').val();
            let sellPrice = 0;

            if (discountType == '1') { // Giảm giá cố định
                let discountAmount = parseFloat($('#discountAmount').val()) || 0;
                sellPrice = originalPrice - discountAmount;
            } else if (discountType == '2') { // Giảm giá theo phần trăm
                let discountPercentage = parseFloat($('#discountPercentage').val()) || 0;
                sellPrice = originalPrice - (originalPrice * discountPercentage / 100);
            }

            // Đảm bảo giá bán không âm
            if (sellPrice < 0) {
                sellPrice = 0;
            }

            // Cập nhật giá bán
            $('#sellPrice').val(sellPrice.toFixed(2));
        }

        // Submit form bằng AJAX với xác nhận trước
        $('#ProductForm').on('submit', function (e) {
            e.preventDefault();
            CKEDITOR.instances.description.updateElement();

            Swal.fire({
                title: 'Bạn có chắc chắn muốn cập nhật sản phẩm này?',
                text: "Bạn sẽ không thể hoàn tác hành động này!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Cập nhật sản phẩm',
                cancelButtonText: 'Hủy',
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    const url = '@Url.Action("Update", "Products", new { area = "Admin" })';
                    $('.loading-container').show();

                    var formData = new FormData(this);

                    $.ajax({
                        method: 'POST',
                        url: url,
                        data: formData,
                        processData: false,
                        contentType: false,
                        headers: {
                            "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function (res) {
                            $('.loading-container').hide();
                            Swal.fire({
                                icon: 'success',
                                title: 'Cập nhật thành công!',
                                text: 'Sản phẩm đã được cập nhật.',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                window.location.href = '/Admin/Products';
                            });
                        },
                        error: function (xhr, error, status) {
                            $('.loading-container').hide();
                            Swal.fire({
                                icon: 'error',
                                title: 'Đã xảy ra lỗi!',
                                text: 'Vui lòng thử lại sau.',
                                confirmButtonText: 'OK'
                            });
                            console.error('Error details:', error);
                        }
                    });
                } else {
                    console.log('Cập nhật sản phẩm đã bị hủy');
                }
            });
        });



        $(function () {
            $('[data-toggle="tooltip"]').tooltip();
        });

    });
</script>

@* Show & hide I Select Variant *@
<script>
    $(document).ready(function () {
        // Xử lý sự kiện khi click vào checkbox
        $('#useVariant').on('change', function () {
            // Kiểm tra trạng thái của checkbox
            if ($(this).is(':checked')) {
                // Nếu checkbox được check thì enable select box
                $('#variantSelect').prop('disabled', false);
            } else {
                // Nếu checkbox không được check thì disable select box
                $('#variantSelect').prop('disabled', true);
            }

            // Refresh selectpicker để cập nhật giao diện (nếu bạn đang sử dụng bootstrap-select)
            $('#variantSelect').selectpicker('refresh');
        });
    });
</script>

 @*  Sự kiện khi modal bị ẩn *@
<script>
    $(document).ready(function () {
      
        $('#attributeModal').on('hidden.bs.modal', function () {
            // Đặt lại các trường trong modal khi ẩn
            $('input[name="attributeName"]').val('');
            $('input[name="attributeCode"]').val('');
            $('input[name="attributeValue"]').val('');
            $('input[name="attributeOrder"]').val('');
        
            $('.loading-container').hide();
        });
    });
</script>